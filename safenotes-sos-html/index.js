export default {
  async fetch(request, env, ctx) {
    const { pathname, searchParams } = new URL(request.url);

    if (request.method === 'POST' && pathname === '/generate') {
      try {
        const { media } = await request.json();

        if (!Array.isArray(media) || media.length === 0 || media.length > 5) {
          return new Response('Must include 1 to 5 media URLs in a "media" array.', { status: 400 });
        }

        const id = crypto.randomUUID();
        const htmlContent = `
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>SafeNotes SOS Media</title>
            <style>
              body { background: #121212; color: #fff; font-family: Arial, sans-serif; padding: 20px; }
              h1 { color: #CA3535; }
              .media-item { margin-bottom: 20px; }
              video, img { max-width: 100%; border: 1px solid #444; border-radius: 10px; }
            </style>
          </head>
          <body>
            <h1>SOS Media Archive</h1>
            <p>This page contains temporary emergency evidence. This page will expire in 24 hours.</p>
            ${media.map(url => {
              if (url.endsWith('.mp4') || url.endsWith('.mov')) {
                return `<div class="media-item"><video controls src="${url}"></video></div>`;
              } else if (url.endsWith('.m4a')) {
                return `<div class="media-item"><audio controls src="${url}"></audio></div>`;
              } else {
                return `<div class="media-item"><img src="${url}" alt="SOS media" /></div>`;
              }
            }).join('')}
            <p style="color:#888; font-size: 0.9em;">Page generated by SafeNotes. If you see a 404 for media, it has expired for safety reasons.</p>
          </body>
          </html>
        `;

        await env.HTML_KV.put(id, htmlContent, { expirationTtl: 86400 });

        const html_url = `https://safenotes-sos-html.safenotes-sos.workers.dev/embed?id=${id}`;
        return new Response(JSON.stringify({ html_url }), {
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (err) {
        return new Response('Error generating HTML: ' + err.message, { status: 500 });
      }
    }

    if (request.method === 'GET' && pathname === '/embed') {
      const id = searchParams.get('id');
      if (!id) {
        return new Response('Missing id', { status: 400 });
      }
      const html = await env.HTML_KV.get(id);
      if (!html) {
        return new Response('Page not found or expired', { status: 404 });
      }
      return new Response(html, {
        headers: { 'Content-Type': 'text/html' }
      });
    }

    return new Response('Not found', { status: 404 });
  }
};
